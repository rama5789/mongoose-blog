// global imports
const assert = require('assert');
// local imports
const User = require('../src/user');

// TEST GROUP(S):-----------------
describe('Reading users out of the database', () => {
  let joe, maria, alex, zach;

  // This hook executes before begining of each test locally
  beforeEach((done) => {
    alex = new User({ name: 'Alex' });
    joe = new User({ name: 'Joe' });
    maria = new User({ name: 'Maria' });
    zach = new User({ name: 'Zach' });

    // console.log(joe._id);

    // save all users
    Promise.all([joe.save(), alex.save(), maria.save(), zach.save()])
      .then(() => done());
  });

  // TEST(S):-----------------
  it('finds all users with a name of joe', (done) => {
    User.find({ name: 'Joe' })
      .then((users) => {
        // mongoose generates _id rather than being generated by mongodb
        assert(users[0]._id.toString() === joe._id.toString());
        done();
      });
  });

  it('find a user with a particular id', (done) => {
    User.findOne({ _id: joe._id })
      .then((user) => {
        assert(user.name === 'Joe');
        done();
      });
  });

  it('can skip and limit the result set', (done) => {
    User.find({})
      // .sort({ name: -1 }) // name in DESC Order -> [Zach, Maria, Joe, Alex]
      .sort({ name: 1 }) // name in ASC Order -> [Alex, Joe, Maria, Zach]
      .skip(1)    // [Joe, Maria, Zach]
      .limit(2)   // [Joe, Maria]
      .then((users) => {
        // console.log(users);
        assert(users.length === 2);
        assert(users[0].name === 'Joe');
        assert(users[1].name === 'Maria');
        done();
      });
  });
});
